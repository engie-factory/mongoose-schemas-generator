import {{modelName}} from '../models/{{modelName}}';

/**
 * BEGIN - Special methods
 */
{{#each controller as |controller controllerName|}}
{{#each method}}
{{#if this.operationId}}
export const {{this.operationId}} = (req, res, next) => {
  try {
    // insert code here
  } catch(e) {
    next(e);
  }
}
{{/if}}
{{/each}}
{{/each}}
/**
 * END - Special methods
 */

export const create = (req, res, next) => {
  const {{structName}} = new {{modelName}}(req.body);
  {{structName}}.save()
    .then(_{{structName}} => res.json(_{{structName}}.toObject()))
    .catch(e => next(e));
}

export const read = (req, res, next) => {
  {{modelName}}.findOne({ _id: req.params.{{structName}}Id })
    .then(_{{structName}} => res.json(_{{structName}}.toObject()))
    .catch(e => next(e));
}

export const update = (req, res, next) => {
  {{modelName}}.findOne({ _id: req.params.{{structName}}Id })
    .then(_{{structName}} => {
      for (key in req.body) {
        _{{structName}}[key] = req.body[key];
      }
      _{{structName}}.save();
      res.json(_{{structName}}.toObject());
    })
    .catch(e => next(e));
}

export const list = (req, res, next) => {
  const query = { $and: [] };
  for (key in req.query) {
    if (key !== 'skip' && key !== 'limit') {
      const param = {};
      param[key] = req.query.key;
      query.$and.push(param);
    }
  }
  {{modelName}}.find(query)
    .skip(parseInt(req.query.skip || 0, 10))
    .limit(parseInt(req.query.limit || 50, 10))
    .then({{listName}} => res.json({{listName}}.toObject()))
    .catch(e => next(e));
}

export const delete = (req, res, next) => {
  {{modelName}}.findOne({ _id: req.params.{{structName}}Id })
    .then({{structName}} => {
      const _{{structName}} = {{structName}}.toObject();
      {{structName}}.remove();
      res.json({
        message: '{{controllerName}} successfully deleted',
        id: req.params.{{structName}}Id,
        object: _{{structName}}
      });
    })
    .catch(e => next(e));
}